#include <Adafruit_BME280.h>
#include <Adafruit_GFX.h>
#include <Adafruit_MCP23017.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_SSD1306.h>
#include <ezButton.h>
#include <SD.h>
#include <Wire.h>

#define MCP_ADDRESS 0x27
#define SSD_ADDRESS 0x3C
#define BME_ADDRESS 0x76

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

#define LOGO_HEIGHT   64
#define LOGO_WIDTH    64

#define CSV_HEADER F("co2,temperature,pressure,humidity")

const int CARD_CHIP_SELECT = 4;

const unsigned long READ_PERIOD = 1000000; // one second
const unsigned long STATE_PERIOD = 3000000; // three seconds

// green levels
// co2 < 2000 ppm
const float GREEN_LIMIT_CO2 = 2000.0F;
// pressure 2.0-3.5 PSI
const float GREEN_LIMIT_PRESSURE_MIN = 14.5F;
const float GREEN_LIMIT_PRESSURE_MAX = 18.0F;
// temperature < 75 F
const float GREEN_LIMIT_TEMPERATURE = 75.0F;

const unsigned char psfLogo [] PROGMEM = { // 64x64px
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xdf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x9f, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x8f, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0f, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x07, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7e, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x07, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xfc, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xfc, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x01, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xf8, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x01, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xf0, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xf0, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x7c, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xe0, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x7e, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xe0, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x3f, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xc0, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x1f, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0x80, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x1f, 0x80, 0x00, 
  0x00, 0x00, 0x1f, 0x80, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x0f, 0xc0, 0x00, 
  0x00, 0x00, 0x3f, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x0f, 0xc0, 0x00, 
  0x00, 0x00, 0x3e, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x07, 0xe0, 0x00, 
  0x00, 0x00, 0x7e, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x03, 0xe0, 0x00, 
  0x00, 0x00, 0xfc, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x03, 0xf0, 0x00, 
  0x00, 0x00, 0xf8, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x01, 0xf0, 0x00
};

Adafruit_MCP23017 mcp;
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
ezButton button(15);
Adafruit_BME280 bme;

File logfile;

int co2 = 400; // todo: remove in favor of sensor

bool manual = false;
int displayState = 0;
int alarm = 0;

void setup() {
  display.begin(SSD1306_SWITCHCAPVCC, SSD_ADDRESS);
  drawlogo();

  while(!Serial && millis()<3000) {
    //wait for USB serial to connect or 3 seconds to elapse
  }
  Serial.begin(9600);
  Serial.println(F("startup"));

  bool sdCardReady = SD.begin(CARD_CHIP_SELECT);
  if (!sdCardReady) {
    Serial.println(F("Card init. failed!"));
    error(2);
  } else {
    Serial.println(F("SD card ready"));
  }
  char filename[15];
  strcpy(filename, "/LOG00.TXT");
  for (uint8_t i = 0; i < 100; i++) {
    filename[4] = '0' + i/10;
    filename[5] = '0' + i%10;
    // create if does not exist, do not open existing, write, sync after write
    if (!SD.exists(filename)) {
      Serial.print(F("will try to use "));
      Serial.println(filename);
      break;
    }
  }
  logfile = SD.open(filename, FILE_WRITE);
  if(!logfile) {
    Serial.print(F("Couldnt create ")); 
    Serial.println(filename);
    error(3);
  }
  
  logfile.println(CSV_HEADER);
  logfile.flush();
  Serial.println(CSV_HEADER);
  
  bme.begin(BME_ADDRESS);

  button.setDebounceTime(50);

  mcp.begin(MCP_ADDRESS);
  mcp.pinMode(0, OUTPUT);
  mcp.pinMode(1, OUTPUT);
  mcp.pinMode(2, OUTPUT);
  mcp.pinMode(3, OUTPUT);
  mcp.pinMode(4, OUTPUT);
  mcp.pinMode(5, OUTPUT);

  delay(1000);
}

void loop() {
  if (displayState > 3) displayState = 0;

  button.loop();
  if(button.isPressed()) {
    manual = !manual;
    displayState = 0;
  }

  static unsigned long lastRead;
  if (micros() - lastRead >= READ_PERIOD) {
    lastRead += READ_PERIOD;

    float temperatureC = bme.readTemperature(); // C
    float temperature = temperatureC * 9.0F / 5.0F + 32.0F;
    float pressureHpa = bme.readPressure(); // hPa -> .0001450 PSI
    float pressure = pressureHpa * 0.00015F; // PSI
    float humidity = bme.readHumidity();

    writeToSD(co2, temperature, pressure, humidity);

    updateLEDs(co2, temperature, pressure);
    updateDisplay(alarm > 0 ? alarm : displayState, co2, temperature, pressure);
  }

  static unsigned long lastStateChange;
  if (!manual && micros() - lastStateChange >= STATE_PERIOD) {
    lastStateChange += STATE_PERIOD;
    displayState++;
    if (displayState > 3) displayState = 1; // cycling skips summary
  }
}

void drawlogo(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    psfLogo, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
}

void updateLEDs(const int co2, const float temperature, const float pressure) {
  if (co2 < GREEN_LIMIT_CO2) {
    // Green
    mcp.digitalWrite(0, LOW); // 1 Red
    mcp.digitalWrite(2, HIGH); // 1 Green
  } else {
    // Red
    mcp.digitalWrite(0, HIGH); // 1 Red
    mcp.digitalWrite(2, LOW); // 1 Green
  }

  if (pressure < GREEN_LIMIT_PRESSURE_MAX) {
    // Green
    mcp.digitalWrite(3, LOW); // 2 Red
    mcp.digitalWrite(5, HIGH); // 2 Green
  } else {
    // Red
    mcp.digitalWrite(3, HIGH); // 2 Red
    mcp.digitalWrite(5, LOW); // 2 Green
  }

  // todo: add third light
  // if (temperature < GREEN_LIMIT_TEMPERATURE) {
  //   // Green
  // } else {
  //   // Red
  // }
}

void updateDisplay(const int displayState, const int co2, const float temperature, const float pressure) {
  switch (displayState) {
    case 1:
      // co2
      display.clearDisplay();
      display.setTextColor(SSD1306_WHITE);
      display.setCursor(0,0);
      display.setTextSize(3);
      display.println(F("CO2"));
      display.setTextSize(4);
      display.println(co2);
      display.display();
      break;
    case 2:
      // temperature
      display.clearDisplay();
      display.setTextColor(SSD1306_WHITE);
      display.setCursor(0,0);
      display.setTextSize(3);
      display.println(F("Temp"));
      display.setTextSize(4);
      display.println(temperature, 1);
      display.display();
      break;
    case 3:
      // pressure
      display.clearDisplay();
      display.setTextColor(SSD1306_WHITE);
      display.setCursor(0,0);
      display.setTextSize(3);
      display.println(F("Pres"));
      display.setTextSize(4);
      display.println(pressure, 2);
      display.display();
      break;
    case 0:
    default:
      displaySummary(co2, temperature, pressure);
  }
  
}

void displaySummary(const int co2, const float temperature, const float pressure) {
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);

  display.setCursor(0,0);
  display.setTextSize(2);

  display.print(F("CO2: "));
  display.println(co2);
  display.print(F("Pres: "));
  display.println(pressure, 1);
  display.print(F("Temp: "));
  display.println(temperature, 1);

  display.display();
}

void writeToSD(const int co2, const float temperature, const float pressure, const float humidity) {
  String dataString = "";
  dataString += String(co2);
  dataString += ",";
  dataString += String(temperature);
  dataString += ",";
  dataString += String(pressure);
  dataString += ",";
  dataString += String(humidity);
  logfile.println(dataString);
  logfile.flush();

  Serial.println(dataString);
}

// blink out an error code
void error(uint8_t errno) {
  while(1) {
    uint8_t i;
    for (i=0; i<errno; i++) {
      digitalWrite(13, HIGH);
      delay(100);
      digitalWrite(13, LOW);
      delay(100);
    }
    for (i=errno; i<10; i++) {
      delay(200);
    }
  }
}
