#include <Adafruit_BME280.h>
#include <Adafruit_GFX.h>
#include <Adafruit_MCP23017.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_SSD1306.h>
#include <ezButton.h>
#include <SD.h>
#include <Wire.h>

#define MCP_ADDRESS 0x27
#define SSD_ADDRESS 0x3C
#define BME_ADDRESS 0x76

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

#define LOGO_HEIGHT   64
#define LOGO_WIDTH    64

const unsigned char psfLogo [] PROGMEM = { // 64x64px
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xdf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x9f, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x8f, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0f, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x07, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7e, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x07, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xfc, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xfc, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x01, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xf8, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x01, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xf0, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xf0, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x7c, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xe0, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x7e, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xe0, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x3f, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xc0, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x1f, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0x80, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x1f, 0x80, 0x00, 
  0x00, 0x00, 0x1f, 0x80, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x0f, 0xc0, 0x00, 
  0x00, 0x00, 0x3f, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x0f, 0xc0, 0x00, 
  0x00, 0x00, 0x3e, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x07, 0xe0, 0x00, 
  0x00, 0x00, 0x7e, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x03, 0xe0, 0x00, 
  0x00, 0x00, 0xfc, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x03, 0xf0, 0x00, 
  0x00, 0x00, 0xf8, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x01, 0xf0, 0x00
};

Adafruit_MCP23017 mcp;
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
ezButton button(15);
Adafruit_BME280 bme;

int co2 = 400;
bool sdCardReady = false;
const int cardChipSelect = 4;

// the setup function runs once when you press reset or power the board
void setup() {
  // SD card setup
  Serial.print("Initializing SD card...");
  sdCardReady = SD.begin(cardChipSelect);
  if (!sdCardReady) {
    Serial.println("SD card initialization failed or card not present");
  } else {
    Serial.println("SD card initialized");
  }
  
  bme.begin(BME_ADDRESS);

  display.begin(SSD1306_SWITCHCAPVCC, SSD_ADDRESS);

  mcp.begin(MCP_ADDRESS);
  mcp.pinMode(0, OUTPUT);
  mcp.pinMode(1, OUTPUT);
  mcp.pinMode(2, OUTPUT);
  mcp.pinMode(3, OUTPUT);
  mcp.pinMode(4, OUTPUT);
  mcp.pinMode(5, OUTPUT);

  drawlogo();
}
 
// the loop function runs over and over again forever
void loop() {

  button.loop();
  if(button.isPressed()) {
      co2++;
  }

  float temperature = bme.readTemperature(); // C
  float pressure = bme.readPressure() / 100.0F; // hPa
  float humidity = bme.readHumidity();

  updateLEDs(co2, temperature, pressure, humidity);
  updateDisplay(co2, temperature, pressure, humidity);
  writeToSD(co2, temperature, pressure, humidity);

  // todo: this won't work for buttons, instead wrap the above in a sampling delay
  delay(1000);
  yield();
}

void drawlogo(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    psfLogo, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
}

void updateLEDs(const int co2, const float temperature, const float pressure, const float humidity) {
  if (co2 < 2000.0) {
    // Green
  } else if (co2 < 8000.0) {
    // Yellow
  } else {
    // Red
  }

  if (humidity < 60.0) {
    // Green
  } else if (humidity < 70.0) {
    // Yellow
  } else {
    // Red
  }

  if (pressure < 250000.0) {
    // Green
    Serial.print("green");
  } else if (pressure < 350000.0) {
    // Yellow
    Serial.print("yellow");
  } else {
    // Red
    Serial.print("red");
  }

  if (temperature < 75.0) {
    // Green
  } else if (temperature < 80.0) {
    // Yellow
  } else {
    // Red
  }

//  mcp.digitalWrite(0, HIGH); // 1 Red
  mcp.digitalWrite(0, LOW); // 1 Red
//  mcp.digitalWrite(1, HIGH); // 1 Yellow
  mcp.digitalWrite(1, LOW); // 1 Yellow
  mcp.digitalWrite(2, HIGH); // 1 Green
//  mcp.digitalWrite(2, LOW); // 1 Green
  
//  mcp.digitalWrite(3, HIGH); // 2 Red
  mcp.digitalWrite(3, HIGH); // 2 Red
//  mcp.digitalWrite(4, HIGH); // 2 Yellow
  mcp.digitalWrite(4, LOW); // 2 Yellow
  mcp.digitalWrite(5, HIGH); // 2 Green
//  mcp.digitalWrite(5, LOW); // 2 Green
}

void updateDisplay(const int co2, const float temperature, const float pressure, const float humidity) {
  // todo: mode parameter to cycle between detailed displays
  
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);

  display.setCursor(0,0);
  display.setTextSize(2);
  
  display.print(F("CO2: "));
  display.println(co2);
  display.print(F("Pres: "));
  display.println(pressure, 0);
  display.print(F("Temp: "));
  display.println(temperature, 1);
  display.print(F("Humi: "));
  display.println(humidity, 1);
  
  display.display();
}

void writeToSD(const int co2, const float temperature, const float pressure, const float humidity) {
  // open the file (only one file can be open at a time)
  File dataFile = SD.open("datalog.csv", FILE_WRITE);

  String dataString = "";
  dataString += String(co2);
  dataString += ",";
  dataString += String(temperature);
  dataString += ",";
  dataString += String(pressure);
  dataString += ",";
  dataString += String(humidity);

  // if the file is available, write to it:
  if (dataFile) {
    dataFile.println(dataString);
    dataFile.close();
  } else {
    // file not available
    Serial.println("error opening datalog file");
  }
}
